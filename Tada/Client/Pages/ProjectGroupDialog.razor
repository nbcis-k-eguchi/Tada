@page "/projectgroup"
@using Tada.Shared;
@using Tada.Client.Shared.Components
@using Tada.Client.Authentication;
@inherits DialogComponent
@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider

<div class="modal fade @base.ShowClass" tabindex="-1" style="display: @base.DisplayStyle">
    <div class="modal-dialog">
        <div class="modal-content" style="background-color:beige">
            <div class="modal-header">
                <h5 class="modal-title"><b>@Title</b></h5>
                @if (IsEdit && confirmDialog != null)
                {
                    <span style="float:right;"><button class="btn btn-danger" @onclick="() => confirmDialog.ShowDialog()"><span class=" oi oi-trash"></span>&nbsp;削除</button> </span>
                }
            </div>
            <div class="modal-body">
                <EditForm Model="@_projectGroup">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="project-name">プロジェクト名</label><br />
                        <InputText id="project-name" @bind-Value="_projectGroup.Name" @onblur="project_name_onblur" />
                    </div>
                    <div style="margin-top:10px;">
                        <label for="project-description">プロジェクト説明</label><br />
                        <InputText id="project-description" @bind-Value="_projectGroup.Description" style="width:400px;"  />
                    </div>
                    @if (IsEdit && confirmProjectMemberDialog != null && confirmProjectEventDialog != null && confirmBalanceReportDialog != null)
                    {
                        <br/>
                        <div style="margin-top:10px;margin-left:10px;">
                            <button class="btn btn-success" style="width:130px;" @onclick="() => confirmProjectMemberDialog.ShowDialog(_projectGroup)"><span class="oi oi-people"></span>&nbsp;メンバー</button>
                            <button class="btn btn-success" style="width:130px;margin-left:10px;" @onclick="() => confirmProjectEventDialog.ShowDialog(_projectGroup)"><span class="oi oi-calculator"></span>&nbsp;イベント</button>
                            <button class="btn btn-success" style="width:130px;margin-left:10px;" @onclick="() => confirmBalanceReportDialog.ShowDialog(_projectGroup)"><span class="oi oi-calculator"></span>&nbsp;会計</button>
                        </div>
                        <br />
                    }
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" style="width:120px" @onclick="() => SelectAction(new DialogResult(){ IsOk = false })">キャンセル</button>
                <button type="button" class="btn btn-primary" style="width:120px" @onclick="() => SelectAction(new DialogResult(){ IsOk = true })" disabled="@IsOkButtonDisabled">O K</button>
            </div>
        </div>
    </div>
</div>

<div class="modal-backdrop fade @base.ShowClass" style="display: @base.DisplayStyle"></div>

<ProjectMemberViewDialog @ref="confirmProjectMemberDialog" ></ProjectMemberViewDialog>
<ProjectEventViewDialog @ref="confirmProjectEventDialog"></ProjectEventViewDialog>
<BalanceReportViewDialog @ref="confirmBalanceReportDialog"></BalanceReportViewDialog>
<ConfirmDialog @ref="confirmDialog" Message="削除してよろしいですか？" ActionSelected="confirmDialog_Selected"></ConfirmDialog>

@code {
    private ProjectGroup _projectGroup = new ProjectGroup();
    private ProjectMemberViewDialog? confirmProjectMemberDialog;
    private ProjectEventViewDialog? confirmProjectEventDialog;
    private BalanceReportViewDialog? confirmBalanceReportDialog;
    private ConfirmDialog? confirmDialog;

    public string Title { get; set; } = "Dialog title";

    [Parameter]
    public string Message { get; set; } = "Message";

    [Parameter]
    public EventCallback<DialogResult> AppendSelected { get; set; }

    [Parameter]
    public EventCallback<DialogResult> UpdatedSelected { get; set; }

    private bool IsEdit { get; set; } = false;

    private string? IsOkButtonDisabled = "disabled";


    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    public async Task ShowDialogCreated()
    {
        Title = "新規作成";
        IsOkButtonDisabled = "disabled";
        IsEdit = false;
        _projectGroup = new ProjectGroup();

        await base.ShowDialog();

    }

    /// <summary>
    /// 編集表示
    /// </summary>
    /// <param name="projectGroup">対象データ</param>
    /// <returns>結果</returns>
    public async Task ShowDialog(ProjectGroup projectGroup)
    {
        Title = "編集";
        IsOkButtonDisabled = null;
        IsEdit = true;
        _projectGroup = projectGroup;

        await base.ShowDialog();
    }

    private async Task SelectAction(DialogResult value)
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var userSession = await customAuthStateProvider.GetUserSession();

        if (value.IsOk)
        {
            _projectGroup.CreateUserId = userSession.UserId;
            _projectGroup.UpdateUserId = userSession.UserId;
            value.Data = _projectGroup;

        }
        await HideDialog();

        if(IsEdit)
            await UpdatedSelected.InvokeAsync(value);
        else
            await AppendSelected.InvokeAsync(value);

    }

    private async Task confirmDialog_Selected(DialogResult value)
    {
        if (value.IsOk)
        {
            // Http経由で削除する
            await Http.DeleteAsync(HttpApi.ProjectGroupUri + "/" + _projectGroup.Id);

            // 削除したら、ダイアログを閉じる→親画面で最新を取得しなおす
            await HideDialog();
            await AppendSelected.InvokeAsync(new DialogResult(){ IsOk = false });
        }

    }

    /// <summary>
    ///プロジェクト名欄でフォーカスが外れたときの処理
    /// </summary>
    private void project_name_onblur()
    {
        // プロジェクト名は必須項目、20文字以内
        if (string.IsNullOrEmpty(_projectGroup.Name) || _projectGroup.Name.Length > 20)
        {
            IsOkButtonDisabled = "disabled";
        }
        else
        {
            IsOkButtonDisabled = null;
        }
        StateHasChanged();
    }
}