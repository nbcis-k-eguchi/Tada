@using Tada.Client.Authentication
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigation

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Tada</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <AuthorizeView Roles="Admin, User">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/account">
                        <span class="oi oi-home" aria-hidden="true"></span> アカウント設定
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <a class="nav-link" href="javascript:void(0)" @onclick="Logout">
                        <span class="oi oi-share-boxed" aria-hidden="true"></span> ログアウト
                    </a>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navigation.NavigateTo("/", true);
    }
}
